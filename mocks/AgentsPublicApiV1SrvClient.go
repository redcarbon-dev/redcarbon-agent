// Code generated by mockery v2.25.1. DO NOT EDIT.

package mocks

import (
	context "context"

	agentsPublicApiV1 "pkg.redcarbon.ai/proto/redcarbon/public_apis/agents/api/v1"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// AgentsPublicApiV1SrvClient is an autogenerated mock type for the AgentsPublicApiV1SrvClient type
type AgentsPublicApiV1SrvClient struct {
	mock.Mock
}

type AgentsPublicApiV1SrvClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AgentsPublicApiV1SrvClient) EXPECT() *AgentsPublicApiV1SrvClient_Expecter {
	return &AgentsPublicApiV1SrvClient_Expecter{mock: &_m.Mock}
}

// GetGrayLogDataMinePendingQueries provides a mock function with given fields: ctx, in, opts
func (_m *AgentsPublicApiV1SrvClient) GetGrayLogDataMinePendingQueries(ctx context.Context, in *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesReq, opts ...grpc.CallOption) (*agentsPublicApiV1.GetGrayLogDataMinePendingQueriesRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesReq, ...grpc.CallOption) (*agentsPublicApiV1.GetGrayLogDataMinePendingQueriesRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesReq, ...grpc.CallOption) *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsPublicApiV1.GetGrayLogDataMinePendingQueriesRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsPublicApiV1SrvClient_GetGrayLogDataMinePendingQueries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGrayLogDataMinePendingQueries'
type AgentsPublicApiV1SrvClient_GetGrayLogDataMinePendingQueries_Call struct {
	*mock.Call
}

// GetGrayLogDataMinePendingQueries is a helper method to define mock.On call
//   - ctx context.Context
//   - in *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesReq
//   - opts ...grpc.CallOption
func (_e *AgentsPublicApiV1SrvClient_Expecter) GetGrayLogDataMinePendingQueries(ctx interface{}, in interface{}, opts ...interface{}) *AgentsPublicApiV1SrvClient_GetGrayLogDataMinePendingQueries_Call {
	return &AgentsPublicApiV1SrvClient_GetGrayLogDataMinePendingQueries_Call{Call: _e.mock.On("GetGrayLogDataMinePendingQueries",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AgentsPublicApiV1SrvClient_GetGrayLogDataMinePendingQueries_Call) Run(run func(ctx context.Context, in *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesReq, opts ...grpc.CallOption)) *AgentsPublicApiV1SrvClient_GetGrayLogDataMinePendingQueries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*agentsPublicApiV1.GetGrayLogDataMinePendingQueriesReq), variadicArgs...)
	})
	return _c
}

func (_c *AgentsPublicApiV1SrvClient_GetGrayLogDataMinePendingQueries_Call) Return(_a0 *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesRes, _a1 error) *AgentsPublicApiV1SrvClient_GetGrayLogDataMinePendingQueries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentsPublicApiV1SrvClient_GetGrayLogDataMinePendingQueries_Call) RunAndReturn(run func(context.Context, *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesReq, ...grpc.CallOption) (*agentsPublicApiV1.GetGrayLogDataMinePendingQueriesRes, error)) *AgentsPublicApiV1SrvClient_GetGrayLogDataMinePendingQueries_Call {
	_c.Call.Return(run)
	return _c
}

// HZ provides a mock function with given fields: ctx, in, opts
func (_m *AgentsPublicApiV1SrvClient) HZ(ctx context.Context, in *agentsPublicApiV1.HZReq, opts ...grpc.CallOption) (*agentsPublicApiV1.HZRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *agentsPublicApiV1.HZRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.HZReq, ...grpc.CallOption) (*agentsPublicApiV1.HZRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.HZReq, ...grpc.CallOption) *agentsPublicApiV1.HZRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsPublicApiV1.HZRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *agentsPublicApiV1.HZReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsPublicApiV1SrvClient_HZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HZ'
type AgentsPublicApiV1SrvClient_HZ_Call struct {
	*mock.Call
}

// HZ is a helper method to define mock.On call
//   - ctx context.Context
//   - in *agentsPublicApiV1.HZReq
//   - opts ...grpc.CallOption
func (_e *AgentsPublicApiV1SrvClient_Expecter) HZ(ctx interface{}, in interface{}, opts ...interface{}) *AgentsPublicApiV1SrvClient_HZ_Call {
	return &AgentsPublicApiV1SrvClient_HZ_Call{Call: _e.mock.On("HZ",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AgentsPublicApiV1SrvClient_HZ_Call) Run(run func(ctx context.Context, in *agentsPublicApiV1.HZReq, opts ...grpc.CallOption)) *AgentsPublicApiV1SrvClient_HZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*agentsPublicApiV1.HZReq), variadicArgs...)
	})
	return _c
}

func (_c *AgentsPublicApiV1SrvClient_HZ_Call) Return(_a0 *agentsPublicApiV1.HZRes, _a1 error) *AgentsPublicApiV1SrvClient_HZ_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentsPublicApiV1SrvClient_HZ_Call) RunAndReturn(run func(context.Context, *agentsPublicApiV1.HZReq, ...grpc.CallOption) (*agentsPublicApiV1.HZRes, error)) *AgentsPublicApiV1SrvClient_HZ_Call {
	_c.Call.Return(run)
	return _c
}

// PullConfigurations provides a mock function with given fields: ctx, in, opts
func (_m *AgentsPublicApiV1SrvClient) PullConfigurations(ctx context.Context, in *agentsPublicApiV1.PullConfigurationsReq, opts ...grpc.CallOption) (*agentsPublicApiV1.PullConfigurationsRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *agentsPublicApiV1.PullConfigurationsRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.PullConfigurationsReq, ...grpc.CallOption) (*agentsPublicApiV1.PullConfigurationsRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.PullConfigurationsReq, ...grpc.CallOption) *agentsPublicApiV1.PullConfigurationsRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsPublicApiV1.PullConfigurationsRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *agentsPublicApiV1.PullConfigurationsReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsPublicApiV1SrvClient_PullConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PullConfigurations'
type AgentsPublicApiV1SrvClient_PullConfigurations_Call struct {
	*mock.Call
}

// PullConfigurations is a helper method to define mock.On call
//   - ctx context.Context
//   - in *agentsPublicApiV1.PullConfigurationsReq
//   - opts ...grpc.CallOption
func (_e *AgentsPublicApiV1SrvClient_Expecter) PullConfigurations(ctx interface{}, in interface{}, opts ...interface{}) *AgentsPublicApiV1SrvClient_PullConfigurations_Call {
	return &AgentsPublicApiV1SrvClient_PullConfigurations_Call{Call: _e.mock.On("PullConfigurations",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AgentsPublicApiV1SrvClient_PullConfigurations_Call) Run(run func(ctx context.Context, in *agentsPublicApiV1.PullConfigurationsReq, opts ...grpc.CallOption)) *AgentsPublicApiV1SrvClient_PullConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*agentsPublicApiV1.PullConfigurationsReq), variadicArgs...)
	})
	return _c
}

func (_c *AgentsPublicApiV1SrvClient_PullConfigurations_Call) Return(_a0 *agentsPublicApiV1.PullConfigurationsRes, _a1 error) *AgentsPublicApiV1SrvClient_PullConfigurations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentsPublicApiV1SrvClient_PullConfigurations_Call) RunAndReturn(run func(context.Context, *agentsPublicApiV1.PullConfigurationsReq, ...grpc.CallOption) (*agentsPublicApiV1.PullConfigurationsRes, error)) *AgentsPublicApiV1SrvClient_PullConfigurations_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: ctx, in, opts
func (_m *AgentsPublicApiV1SrvClient) RefreshToken(ctx context.Context, in *agentsPublicApiV1.RefreshTokenReq, opts ...grpc.CallOption) (*agentsPublicApiV1.RefreshTokenRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *agentsPublicApiV1.RefreshTokenRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.RefreshTokenReq, ...grpc.CallOption) (*agentsPublicApiV1.RefreshTokenRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.RefreshTokenReq, ...grpc.CallOption) *agentsPublicApiV1.RefreshTokenRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsPublicApiV1.RefreshTokenRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *agentsPublicApiV1.RefreshTokenReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsPublicApiV1SrvClient_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type AgentsPublicApiV1SrvClient_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - in *agentsPublicApiV1.RefreshTokenReq
//   - opts ...grpc.CallOption
func (_e *AgentsPublicApiV1SrvClient_Expecter) RefreshToken(ctx interface{}, in interface{}, opts ...interface{}) *AgentsPublicApiV1SrvClient_RefreshToken_Call {
	return &AgentsPublicApiV1SrvClient_RefreshToken_Call{Call: _e.mock.On("RefreshToken",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AgentsPublicApiV1SrvClient_RefreshToken_Call) Run(run func(ctx context.Context, in *agentsPublicApiV1.RefreshTokenReq, opts ...grpc.CallOption)) *AgentsPublicApiV1SrvClient_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*agentsPublicApiV1.RefreshTokenReq), variadicArgs...)
	})
	return _c
}

func (_c *AgentsPublicApiV1SrvClient_RefreshToken_Call) Return(_a0 *agentsPublicApiV1.RefreshTokenRes, _a1 error) *AgentsPublicApiV1SrvClient_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentsPublicApiV1SrvClient_RefreshToken_Call) RunAndReturn(run func(context.Context, *agentsPublicApiV1.RefreshTokenReq, ...grpc.CallOption) (*agentsPublicApiV1.RefreshTokenRes, error)) *AgentsPublicApiV1SrvClient_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// SendGrayLogDatamineQueryErrorData provides a mock function with given fields: ctx, in, opts
func (_m *AgentsPublicApiV1SrvClient) SendGrayLogDatamineQueryErrorData(ctx context.Context, in *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataReq, opts ...grpc.CallOption) (*agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataReq, ...grpc.CallOption) (*agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataReq, ...grpc.CallOption) *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryErrorData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendGrayLogDatamineQueryErrorData'
type AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryErrorData_Call struct {
	*mock.Call
}

// SendGrayLogDatamineQueryErrorData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataReq
//   - opts ...grpc.CallOption
func (_e *AgentsPublicApiV1SrvClient_Expecter) SendGrayLogDatamineQueryErrorData(ctx interface{}, in interface{}, opts ...interface{}) *AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryErrorData_Call {
	return &AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryErrorData_Call{Call: _e.mock.On("SendGrayLogDatamineQueryErrorData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryErrorData_Call) Run(run func(ctx context.Context, in *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataReq, opts ...grpc.CallOption)) *AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryErrorData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataReq), variadicArgs...)
	})
	return _c
}

func (_c *AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryErrorData_Call) Return(_a0 *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataRes, _a1 error) *AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryErrorData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryErrorData_Call) RunAndReturn(run func(context.Context, *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataReq, ...grpc.CallOption) (*agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataRes, error)) *AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryErrorData_Call {
	_c.Call.Return(run)
	return _c
}

// SendGrayLogDatamineQueryResultsData provides a mock function with given fields: ctx, in, opts
func (_m *AgentsPublicApiV1SrvClient) SendGrayLogDatamineQueryResultsData(ctx context.Context, in *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataReq, opts ...grpc.CallOption) (*agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataReq, ...grpc.CallOption) (*agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataReq, ...grpc.CallOption) *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryResultsData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendGrayLogDatamineQueryResultsData'
type AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryResultsData_Call struct {
	*mock.Call
}

// SendGrayLogDatamineQueryResultsData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataReq
//   - opts ...grpc.CallOption
func (_e *AgentsPublicApiV1SrvClient_Expecter) SendGrayLogDatamineQueryResultsData(ctx interface{}, in interface{}, opts ...interface{}) *AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryResultsData_Call {
	return &AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryResultsData_Call{Call: _e.mock.On("SendGrayLogDatamineQueryResultsData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryResultsData_Call) Run(run func(ctx context.Context, in *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataReq, opts ...grpc.CallOption)) *AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryResultsData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataReq), variadicArgs...)
	})
	return _c
}

func (_c *AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryResultsData_Call) Return(_a0 *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataRes, _a1 error) *AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryResultsData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryResultsData_Call) RunAndReturn(run func(context.Context, *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataReq, ...grpc.CallOption) (*agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataRes, error)) *AgentsPublicApiV1SrvClient_SendGrayLogDatamineQueryResultsData_Call {
	_c.Call.Return(run)
	return _c
}

// SendGrayLogImpossibleTravelData provides a mock function with given fields: ctx, in, opts
func (_m *AgentsPublicApiV1SrvClient) SendGrayLogImpossibleTravelData(ctx context.Context, in *agentsPublicApiV1.SendGrayLogImpossibleTravelDataReq, opts ...grpc.CallOption) (*agentsPublicApiV1.SendGrayLogImpossibleTravelDataRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *agentsPublicApiV1.SendGrayLogImpossibleTravelDataRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.SendGrayLogImpossibleTravelDataReq, ...grpc.CallOption) (*agentsPublicApiV1.SendGrayLogImpossibleTravelDataRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.SendGrayLogImpossibleTravelDataReq, ...grpc.CallOption) *agentsPublicApiV1.SendGrayLogImpossibleTravelDataRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsPublicApiV1.SendGrayLogImpossibleTravelDataRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *agentsPublicApiV1.SendGrayLogImpossibleTravelDataReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsPublicApiV1SrvClient_SendGrayLogImpossibleTravelData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendGrayLogImpossibleTravelData'
type AgentsPublicApiV1SrvClient_SendGrayLogImpossibleTravelData_Call struct {
	*mock.Call
}

// SendGrayLogImpossibleTravelData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *agentsPublicApiV1.SendGrayLogImpossibleTravelDataReq
//   - opts ...grpc.CallOption
func (_e *AgentsPublicApiV1SrvClient_Expecter) SendGrayLogImpossibleTravelData(ctx interface{}, in interface{}, opts ...interface{}) *AgentsPublicApiV1SrvClient_SendGrayLogImpossibleTravelData_Call {
	return &AgentsPublicApiV1SrvClient_SendGrayLogImpossibleTravelData_Call{Call: _e.mock.On("SendGrayLogImpossibleTravelData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AgentsPublicApiV1SrvClient_SendGrayLogImpossibleTravelData_Call) Run(run func(ctx context.Context, in *agentsPublicApiV1.SendGrayLogImpossibleTravelDataReq, opts ...grpc.CallOption)) *AgentsPublicApiV1SrvClient_SendGrayLogImpossibleTravelData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*agentsPublicApiV1.SendGrayLogImpossibleTravelDataReq), variadicArgs...)
	})
	return _c
}

func (_c *AgentsPublicApiV1SrvClient_SendGrayLogImpossibleTravelData_Call) Return(_a0 *agentsPublicApiV1.SendGrayLogImpossibleTravelDataRes, _a1 error) *AgentsPublicApiV1SrvClient_SendGrayLogImpossibleTravelData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentsPublicApiV1SrvClient_SendGrayLogImpossibleTravelData_Call) RunAndReturn(run func(context.Context, *agentsPublicApiV1.SendGrayLogImpossibleTravelDataReq, ...grpc.CallOption) (*agentsPublicApiV1.SendGrayLogImpossibleTravelDataRes, error)) *AgentsPublicApiV1SrvClient_SendGrayLogImpossibleTravelData_Call {
	_c.Call.Return(run)
	return _c
}

// SendSentinelOneData provides a mock function with given fields: ctx, in, opts
func (_m *AgentsPublicApiV1SrvClient) SendSentinelOneData(ctx context.Context, in *agentsPublicApiV1.SendSentinelOneDataReq, opts ...grpc.CallOption) (*agentsPublicApiV1.SendSentinelOneDataRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *agentsPublicApiV1.SendSentinelOneDataRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.SendSentinelOneDataReq, ...grpc.CallOption) (*agentsPublicApiV1.SendSentinelOneDataRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.SendSentinelOneDataReq, ...grpc.CallOption) *agentsPublicApiV1.SendSentinelOneDataRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsPublicApiV1.SendSentinelOneDataRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *agentsPublicApiV1.SendSentinelOneDataReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsPublicApiV1SrvClient_SendSentinelOneData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSentinelOneData'
type AgentsPublicApiV1SrvClient_SendSentinelOneData_Call struct {
	*mock.Call
}

// SendSentinelOneData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *agentsPublicApiV1.SendSentinelOneDataReq
//   - opts ...grpc.CallOption
func (_e *AgentsPublicApiV1SrvClient_Expecter) SendSentinelOneData(ctx interface{}, in interface{}, opts ...interface{}) *AgentsPublicApiV1SrvClient_SendSentinelOneData_Call {
	return &AgentsPublicApiV1SrvClient_SendSentinelOneData_Call{Call: _e.mock.On("SendSentinelOneData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AgentsPublicApiV1SrvClient_SendSentinelOneData_Call) Run(run func(ctx context.Context, in *agentsPublicApiV1.SendSentinelOneDataReq, opts ...grpc.CallOption)) *AgentsPublicApiV1SrvClient_SendSentinelOneData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*agentsPublicApiV1.SendSentinelOneDataReq), variadicArgs...)
	})
	return _c
}

func (_c *AgentsPublicApiV1SrvClient_SendSentinelOneData_Call) Return(_a0 *agentsPublicApiV1.SendSentinelOneDataRes, _a1 error) *AgentsPublicApiV1SrvClient_SendSentinelOneData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentsPublicApiV1SrvClient_SendSentinelOneData_Call) RunAndReturn(run func(context.Context, *agentsPublicApiV1.SendSentinelOneDataReq, ...grpc.CallOption) (*agentsPublicApiV1.SendSentinelOneDataRes, error)) *AgentsPublicApiV1SrvClient_SendSentinelOneData_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAgentsPublicApiV1SrvClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewAgentsPublicApiV1SrvClient creates a new instance of AgentsPublicApiV1SrvClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAgentsPublicApiV1SrvClient(t mockConstructorTestingTNewAgentsPublicApiV1SrvClient) *AgentsPublicApiV1SrvClient {
	mock := &AgentsPublicApiV1SrvClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
