// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	agentsExternalApiV1 "pkg.redcarbon.ai/proto/redcarbon/external_api/agents/api/v1"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// AgentsExternalV1SrvClient is an autogenerated mock type for the AgentsExternalV1SrvClient type
type AgentsExternalV1SrvClient struct {
	mock.Mock
}

type AgentsExternalV1SrvClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AgentsExternalV1SrvClient) EXPECT() *AgentsExternalV1SrvClient_Expecter {
	return &AgentsExternalV1SrvClient_Expecter{mock: &_m.Mock}
}

// HZ provides a mock function with given fields: ctx, in, opts
func (_m *AgentsExternalV1SrvClient) HZ(ctx context.Context, in *agentsExternalApiV1.HZReq, opts ...grpc.CallOption) (*agentsExternalApiV1.HZRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *agentsExternalApiV1.HZRes
	if rf, ok := ret.Get(0).(func(context.Context, *agentsExternalApiV1.HZReq, ...grpc.CallOption) *agentsExternalApiV1.HZRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsExternalApiV1.HZRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *agentsExternalApiV1.HZReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsExternalV1SrvClient_HZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HZ'
type AgentsExternalV1SrvClient_HZ_Call struct {
	*mock.Call
}

// HZ is a helper method to define mock.On call
//   - ctx context.Context
//   - in *agentsExternalApiV1.HZReq
//   - opts ...grpc.CallOption
func (_e *AgentsExternalV1SrvClient_Expecter) HZ(ctx interface{}, in interface{}, opts ...interface{}) *AgentsExternalV1SrvClient_HZ_Call {
	return &AgentsExternalV1SrvClient_HZ_Call{Call: _e.mock.On("HZ",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AgentsExternalV1SrvClient_HZ_Call) Run(run func(ctx context.Context, in *agentsExternalApiV1.HZReq, opts ...grpc.CallOption)) *AgentsExternalV1SrvClient_HZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*agentsExternalApiV1.HZReq), variadicArgs...)
	})
	return _c
}

func (_c *AgentsExternalV1SrvClient_HZ_Call) Return(_a0 *agentsExternalApiV1.HZRes, _a1 error) *AgentsExternalV1SrvClient_HZ_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PullConfigurations provides a mock function with given fields: ctx, in, opts
func (_m *AgentsExternalV1SrvClient) PullConfigurations(ctx context.Context, in *agentsExternalApiV1.PullConfigurationsReq, opts ...grpc.CallOption) (*agentsExternalApiV1.PullConfigurationsRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *agentsExternalApiV1.PullConfigurationsRes
	if rf, ok := ret.Get(0).(func(context.Context, *agentsExternalApiV1.PullConfigurationsReq, ...grpc.CallOption) *agentsExternalApiV1.PullConfigurationsRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsExternalApiV1.PullConfigurationsRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *agentsExternalApiV1.PullConfigurationsReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsExternalV1SrvClient_PullConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PullConfigurations'
type AgentsExternalV1SrvClient_PullConfigurations_Call struct {
	*mock.Call
}

// PullConfigurations is a helper method to define mock.On call
//   - ctx context.Context
//   - in *agentsExternalApiV1.PullConfigurationsReq
//   - opts ...grpc.CallOption
func (_e *AgentsExternalV1SrvClient_Expecter) PullConfigurations(ctx interface{}, in interface{}, opts ...interface{}) *AgentsExternalV1SrvClient_PullConfigurations_Call {
	return &AgentsExternalV1SrvClient_PullConfigurations_Call{Call: _e.mock.On("PullConfigurations",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AgentsExternalV1SrvClient_PullConfigurations_Call) Run(run func(ctx context.Context, in *agentsExternalApiV1.PullConfigurationsReq, opts ...grpc.CallOption)) *AgentsExternalV1SrvClient_PullConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*agentsExternalApiV1.PullConfigurationsReq), variadicArgs...)
	})
	return _c
}

func (_c *AgentsExternalV1SrvClient_PullConfigurations_Call) Return(_a0 *agentsExternalApiV1.PullConfigurationsRes, _a1 error) *AgentsExternalV1SrvClient_PullConfigurations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RefreshToken provides a mock function with given fields: ctx, in, opts
func (_m *AgentsExternalV1SrvClient) RefreshToken(ctx context.Context, in *agentsExternalApiV1.RefreshTokenReq, opts ...grpc.CallOption) (*agentsExternalApiV1.RefreshTokenRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *agentsExternalApiV1.RefreshTokenRes
	if rf, ok := ret.Get(0).(func(context.Context, *agentsExternalApiV1.RefreshTokenReq, ...grpc.CallOption) *agentsExternalApiV1.RefreshTokenRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsExternalApiV1.RefreshTokenRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *agentsExternalApiV1.RefreshTokenReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsExternalV1SrvClient_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type AgentsExternalV1SrvClient_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - in *agentsExternalApiV1.RefreshTokenReq
//   - opts ...grpc.CallOption
func (_e *AgentsExternalV1SrvClient_Expecter) RefreshToken(ctx interface{}, in interface{}, opts ...interface{}) *AgentsExternalV1SrvClient_RefreshToken_Call {
	return &AgentsExternalV1SrvClient_RefreshToken_Call{Call: _e.mock.On("RefreshToken",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AgentsExternalV1SrvClient_RefreshToken_Call) Run(run func(ctx context.Context, in *agentsExternalApiV1.RefreshTokenReq, opts ...grpc.CallOption)) *AgentsExternalV1SrvClient_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*agentsExternalApiV1.RefreshTokenReq), variadicArgs...)
	})
	return _c
}

func (_c *AgentsExternalV1SrvClient_RefreshToken_Call) Return(_a0 *agentsExternalApiV1.RefreshTokenRes, _a1 error) *AgentsExternalV1SrvClient_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SendData provides a mock function with given fields: ctx, in, opts
func (_m *AgentsExternalV1SrvClient) SendData(ctx context.Context, in *agentsExternalApiV1.SendDataReq, opts ...grpc.CallOption) (*agentsExternalApiV1.SendDataRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *agentsExternalApiV1.SendDataRes
	if rf, ok := ret.Get(0).(func(context.Context, *agentsExternalApiV1.SendDataReq, ...grpc.CallOption) *agentsExternalApiV1.SendDataRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsExternalApiV1.SendDataRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *agentsExternalApiV1.SendDataReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsExternalV1SrvClient_SendData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendData'
type AgentsExternalV1SrvClient_SendData_Call struct {
	*mock.Call
}

// SendData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *agentsExternalApiV1.SendDataReq
//   - opts ...grpc.CallOption
func (_e *AgentsExternalV1SrvClient_Expecter) SendData(ctx interface{}, in interface{}, opts ...interface{}) *AgentsExternalV1SrvClient_SendData_Call {
	return &AgentsExternalV1SrvClient_SendData_Call{Call: _e.mock.On("SendData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AgentsExternalV1SrvClient_SendData_Call) Run(run func(ctx context.Context, in *agentsExternalApiV1.SendDataReq, opts ...grpc.CallOption)) *AgentsExternalV1SrvClient_SendData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*agentsExternalApiV1.SendDataReq), variadicArgs...)
	})
	return _c
}

func (_c *AgentsExternalV1SrvClient_SendData_Call) Return(_a0 *agentsExternalApiV1.SendDataRes, _a1 error) *AgentsExternalV1SrvClient_SendData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewAgentsExternalV1SrvClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewAgentsExternalV1SrvClient creates a new instance of AgentsExternalV1SrvClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAgentsExternalV1SrvClient(t mockConstructorTestingTNewAgentsExternalV1SrvClient) *AgentsExternalV1SrvClient {
	mock := &AgentsExternalV1SrvClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
