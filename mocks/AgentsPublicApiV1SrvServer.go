// Code generated by mockery v2.25.1. DO NOT EDIT.

package mocks

import (
	context "context"

	agentsPublicApiV1 "pkg.redcarbon.ai/proto/redcarbon/public_apis/agents/api/v1"

	mock "github.com/stretchr/testify/mock"
)

// AgentsPublicApiV1SrvServer is an autogenerated mock type for the AgentsPublicApiV1SrvServer type
type AgentsPublicApiV1SrvServer struct {
	mock.Mock
}

type AgentsPublicApiV1SrvServer_Expecter struct {
	mock *mock.Mock
}

func (_m *AgentsPublicApiV1SrvServer) EXPECT() *AgentsPublicApiV1SrvServer_Expecter {
	return &AgentsPublicApiV1SrvServer_Expecter{mock: &_m.Mock}
}

// GetGrayLogDataMinePendingQueries provides a mock function with given fields: _a0, _a1
func (_m *AgentsPublicApiV1SrvServer) GetGrayLogDataMinePendingQueries(_a0 context.Context, _a1 *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesReq) (*agentsPublicApiV1.GetGrayLogDataMinePendingQueriesRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesReq) (*agentsPublicApiV1.GetGrayLogDataMinePendingQueriesRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesReq) *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsPublicApiV1.GetGrayLogDataMinePendingQueriesRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsPublicApiV1SrvServer_GetGrayLogDataMinePendingQueries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGrayLogDataMinePendingQueries'
type AgentsPublicApiV1SrvServer_GetGrayLogDataMinePendingQueries_Call struct {
	*mock.Call
}

// GetGrayLogDataMinePendingQueries is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesReq
func (_e *AgentsPublicApiV1SrvServer_Expecter) GetGrayLogDataMinePendingQueries(_a0 interface{}, _a1 interface{}) *AgentsPublicApiV1SrvServer_GetGrayLogDataMinePendingQueries_Call {
	return &AgentsPublicApiV1SrvServer_GetGrayLogDataMinePendingQueries_Call{Call: _e.mock.On("GetGrayLogDataMinePendingQueries", _a0, _a1)}
}

func (_c *AgentsPublicApiV1SrvServer_GetGrayLogDataMinePendingQueries_Call) Run(run func(_a0 context.Context, _a1 *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesReq)) *AgentsPublicApiV1SrvServer_GetGrayLogDataMinePendingQueries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*agentsPublicApiV1.GetGrayLogDataMinePendingQueriesReq))
	})
	return _c
}

func (_c *AgentsPublicApiV1SrvServer_GetGrayLogDataMinePendingQueries_Call) Return(_a0 *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesRes, _a1 error) *AgentsPublicApiV1SrvServer_GetGrayLogDataMinePendingQueries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentsPublicApiV1SrvServer_GetGrayLogDataMinePendingQueries_Call) RunAndReturn(run func(context.Context, *agentsPublicApiV1.GetGrayLogDataMinePendingQueriesReq) (*agentsPublicApiV1.GetGrayLogDataMinePendingQueriesRes, error)) *AgentsPublicApiV1SrvServer_GetGrayLogDataMinePendingQueries_Call {
	_c.Call.Return(run)
	return _c
}

// HZ provides a mock function with given fields: _a0, _a1
func (_m *AgentsPublicApiV1SrvServer) HZ(_a0 context.Context, _a1 *agentsPublicApiV1.HZReq) (*agentsPublicApiV1.HZRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *agentsPublicApiV1.HZRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.HZReq) (*agentsPublicApiV1.HZRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.HZReq) *agentsPublicApiV1.HZRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsPublicApiV1.HZRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *agentsPublicApiV1.HZReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsPublicApiV1SrvServer_HZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HZ'
type AgentsPublicApiV1SrvServer_HZ_Call struct {
	*mock.Call
}

// HZ is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *agentsPublicApiV1.HZReq
func (_e *AgentsPublicApiV1SrvServer_Expecter) HZ(_a0 interface{}, _a1 interface{}) *AgentsPublicApiV1SrvServer_HZ_Call {
	return &AgentsPublicApiV1SrvServer_HZ_Call{Call: _e.mock.On("HZ", _a0, _a1)}
}

func (_c *AgentsPublicApiV1SrvServer_HZ_Call) Run(run func(_a0 context.Context, _a1 *agentsPublicApiV1.HZReq)) *AgentsPublicApiV1SrvServer_HZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*agentsPublicApiV1.HZReq))
	})
	return _c
}

func (_c *AgentsPublicApiV1SrvServer_HZ_Call) Return(_a0 *agentsPublicApiV1.HZRes, _a1 error) *AgentsPublicApiV1SrvServer_HZ_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentsPublicApiV1SrvServer_HZ_Call) RunAndReturn(run func(context.Context, *agentsPublicApiV1.HZReq) (*agentsPublicApiV1.HZRes, error)) *AgentsPublicApiV1SrvServer_HZ_Call {
	_c.Call.Return(run)
	return _c
}

// PullConfigurations provides a mock function with given fields: _a0, _a1
func (_m *AgentsPublicApiV1SrvServer) PullConfigurations(_a0 context.Context, _a1 *agentsPublicApiV1.PullConfigurationsReq) (*agentsPublicApiV1.PullConfigurationsRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *agentsPublicApiV1.PullConfigurationsRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.PullConfigurationsReq) (*agentsPublicApiV1.PullConfigurationsRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.PullConfigurationsReq) *agentsPublicApiV1.PullConfigurationsRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsPublicApiV1.PullConfigurationsRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *agentsPublicApiV1.PullConfigurationsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsPublicApiV1SrvServer_PullConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PullConfigurations'
type AgentsPublicApiV1SrvServer_PullConfigurations_Call struct {
	*mock.Call
}

// PullConfigurations is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *agentsPublicApiV1.PullConfigurationsReq
func (_e *AgentsPublicApiV1SrvServer_Expecter) PullConfigurations(_a0 interface{}, _a1 interface{}) *AgentsPublicApiV1SrvServer_PullConfigurations_Call {
	return &AgentsPublicApiV1SrvServer_PullConfigurations_Call{Call: _e.mock.On("PullConfigurations", _a0, _a1)}
}

func (_c *AgentsPublicApiV1SrvServer_PullConfigurations_Call) Run(run func(_a0 context.Context, _a1 *agentsPublicApiV1.PullConfigurationsReq)) *AgentsPublicApiV1SrvServer_PullConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*agentsPublicApiV1.PullConfigurationsReq))
	})
	return _c
}

func (_c *AgentsPublicApiV1SrvServer_PullConfigurations_Call) Return(_a0 *agentsPublicApiV1.PullConfigurationsRes, _a1 error) *AgentsPublicApiV1SrvServer_PullConfigurations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentsPublicApiV1SrvServer_PullConfigurations_Call) RunAndReturn(run func(context.Context, *agentsPublicApiV1.PullConfigurationsReq) (*agentsPublicApiV1.PullConfigurationsRes, error)) *AgentsPublicApiV1SrvServer_PullConfigurations_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: _a0, _a1
func (_m *AgentsPublicApiV1SrvServer) RefreshToken(_a0 context.Context, _a1 *agentsPublicApiV1.RefreshTokenReq) (*agentsPublicApiV1.RefreshTokenRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *agentsPublicApiV1.RefreshTokenRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.RefreshTokenReq) (*agentsPublicApiV1.RefreshTokenRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.RefreshTokenReq) *agentsPublicApiV1.RefreshTokenRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsPublicApiV1.RefreshTokenRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *agentsPublicApiV1.RefreshTokenReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsPublicApiV1SrvServer_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type AgentsPublicApiV1SrvServer_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *agentsPublicApiV1.RefreshTokenReq
func (_e *AgentsPublicApiV1SrvServer_Expecter) RefreshToken(_a0 interface{}, _a1 interface{}) *AgentsPublicApiV1SrvServer_RefreshToken_Call {
	return &AgentsPublicApiV1SrvServer_RefreshToken_Call{Call: _e.mock.On("RefreshToken", _a0, _a1)}
}

func (_c *AgentsPublicApiV1SrvServer_RefreshToken_Call) Run(run func(_a0 context.Context, _a1 *agentsPublicApiV1.RefreshTokenReq)) *AgentsPublicApiV1SrvServer_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*agentsPublicApiV1.RefreshTokenReq))
	})
	return _c
}

func (_c *AgentsPublicApiV1SrvServer_RefreshToken_Call) Return(_a0 *agentsPublicApiV1.RefreshTokenRes, _a1 error) *AgentsPublicApiV1SrvServer_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentsPublicApiV1SrvServer_RefreshToken_Call) RunAndReturn(run func(context.Context, *agentsPublicApiV1.RefreshTokenReq) (*agentsPublicApiV1.RefreshTokenRes, error)) *AgentsPublicApiV1SrvServer_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// SendGrayLogDatamineQueryErrorData provides a mock function with given fields: _a0, _a1
func (_m *AgentsPublicApiV1SrvServer) SendGrayLogDatamineQueryErrorData(_a0 context.Context, _a1 *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataReq) (*agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataReq) (*agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataReq) *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryErrorData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendGrayLogDatamineQueryErrorData'
type AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryErrorData_Call struct {
	*mock.Call
}

// SendGrayLogDatamineQueryErrorData is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataReq
func (_e *AgentsPublicApiV1SrvServer_Expecter) SendGrayLogDatamineQueryErrorData(_a0 interface{}, _a1 interface{}) *AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryErrorData_Call {
	return &AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryErrorData_Call{Call: _e.mock.On("SendGrayLogDatamineQueryErrorData", _a0, _a1)}
}

func (_c *AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryErrorData_Call) Run(run func(_a0 context.Context, _a1 *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataReq)) *AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryErrorData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataReq))
	})
	return _c
}

func (_c *AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryErrorData_Call) Return(_a0 *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataRes, _a1 error) *AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryErrorData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryErrorData_Call) RunAndReturn(run func(context.Context, *agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataReq) (*agentsPublicApiV1.SendGrayLogDatamineQueryErrorDataRes, error)) *AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryErrorData_Call {
	_c.Call.Return(run)
	return _c
}

// SendGrayLogDatamineQueryResultsData provides a mock function with given fields: _a0, _a1
func (_m *AgentsPublicApiV1SrvServer) SendGrayLogDatamineQueryResultsData(_a0 context.Context, _a1 *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataReq) (*agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataReq) (*agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataReq) *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryResultsData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendGrayLogDatamineQueryResultsData'
type AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryResultsData_Call struct {
	*mock.Call
}

// SendGrayLogDatamineQueryResultsData is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataReq
func (_e *AgentsPublicApiV1SrvServer_Expecter) SendGrayLogDatamineQueryResultsData(_a0 interface{}, _a1 interface{}) *AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryResultsData_Call {
	return &AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryResultsData_Call{Call: _e.mock.On("SendGrayLogDatamineQueryResultsData", _a0, _a1)}
}

func (_c *AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryResultsData_Call) Run(run func(_a0 context.Context, _a1 *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataReq)) *AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryResultsData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataReq))
	})
	return _c
}

func (_c *AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryResultsData_Call) Return(_a0 *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataRes, _a1 error) *AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryResultsData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryResultsData_Call) RunAndReturn(run func(context.Context, *agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataReq) (*agentsPublicApiV1.SendGrayLogDatamineQueryResultsDataRes, error)) *AgentsPublicApiV1SrvServer_SendGrayLogDatamineQueryResultsData_Call {
	_c.Call.Return(run)
	return _c
}

// SendGrayLogImpossibleTravelData provides a mock function with given fields: _a0, _a1
func (_m *AgentsPublicApiV1SrvServer) SendGrayLogImpossibleTravelData(_a0 context.Context, _a1 *agentsPublicApiV1.SendGrayLogImpossibleTravelDataReq) (*agentsPublicApiV1.SendGrayLogImpossibleTravelDataRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *agentsPublicApiV1.SendGrayLogImpossibleTravelDataRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.SendGrayLogImpossibleTravelDataReq) (*agentsPublicApiV1.SendGrayLogImpossibleTravelDataRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.SendGrayLogImpossibleTravelDataReq) *agentsPublicApiV1.SendGrayLogImpossibleTravelDataRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsPublicApiV1.SendGrayLogImpossibleTravelDataRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *agentsPublicApiV1.SendGrayLogImpossibleTravelDataReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsPublicApiV1SrvServer_SendGrayLogImpossibleTravelData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendGrayLogImpossibleTravelData'
type AgentsPublicApiV1SrvServer_SendGrayLogImpossibleTravelData_Call struct {
	*mock.Call
}

// SendGrayLogImpossibleTravelData is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *agentsPublicApiV1.SendGrayLogImpossibleTravelDataReq
func (_e *AgentsPublicApiV1SrvServer_Expecter) SendGrayLogImpossibleTravelData(_a0 interface{}, _a1 interface{}) *AgentsPublicApiV1SrvServer_SendGrayLogImpossibleTravelData_Call {
	return &AgentsPublicApiV1SrvServer_SendGrayLogImpossibleTravelData_Call{Call: _e.mock.On("SendGrayLogImpossibleTravelData", _a0, _a1)}
}

func (_c *AgentsPublicApiV1SrvServer_SendGrayLogImpossibleTravelData_Call) Run(run func(_a0 context.Context, _a1 *agentsPublicApiV1.SendGrayLogImpossibleTravelDataReq)) *AgentsPublicApiV1SrvServer_SendGrayLogImpossibleTravelData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*agentsPublicApiV1.SendGrayLogImpossibleTravelDataReq))
	})
	return _c
}

func (_c *AgentsPublicApiV1SrvServer_SendGrayLogImpossibleTravelData_Call) Return(_a0 *agentsPublicApiV1.SendGrayLogImpossibleTravelDataRes, _a1 error) *AgentsPublicApiV1SrvServer_SendGrayLogImpossibleTravelData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentsPublicApiV1SrvServer_SendGrayLogImpossibleTravelData_Call) RunAndReturn(run func(context.Context, *agentsPublicApiV1.SendGrayLogImpossibleTravelDataReq) (*agentsPublicApiV1.SendGrayLogImpossibleTravelDataRes, error)) *AgentsPublicApiV1SrvServer_SendGrayLogImpossibleTravelData_Call {
	_c.Call.Return(run)
	return _c
}

// SendSentinelOneData provides a mock function with given fields: _a0, _a1
func (_m *AgentsPublicApiV1SrvServer) SendSentinelOneData(_a0 context.Context, _a1 *agentsPublicApiV1.SendSentinelOneDataReq) (*agentsPublicApiV1.SendSentinelOneDataRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *agentsPublicApiV1.SendSentinelOneDataRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.SendSentinelOneDataReq) (*agentsPublicApiV1.SendSentinelOneDataRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *agentsPublicApiV1.SendSentinelOneDataReq) *agentsPublicApiV1.SendSentinelOneDataRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentsPublicApiV1.SendSentinelOneDataRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *agentsPublicApiV1.SendSentinelOneDataReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsPublicApiV1SrvServer_SendSentinelOneData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSentinelOneData'
type AgentsPublicApiV1SrvServer_SendSentinelOneData_Call struct {
	*mock.Call
}

// SendSentinelOneData is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *agentsPublicApiV1.SendSentinelOneDataReq
func (_e *AgentsPublicApiV1SrvServer_Expecter) SendSentinelOneData(_a0 interface{}, _a1 interface{}) *AgentsPublicApiV1SrvServer_SendSentinelOneData_Call {
	return &AgentsPublicApiV1SrvServer_SendSentinelOneData_Call{Call: _e.mock.On("SendSentinelOneData", _a0, _a1)}
}

func (_c *AgentsPublicApiV1SrvServer_SendSentinelOneData_Call) Run(run func(_a0 context.Context, _a1 *agentsPublicApiV1.SendSentinelOneDataReq)) *AgentsPublicApiV1SrvServer_SendSentinelOneData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*agentsPublicApiV1.SendSentinelOneDataReq))
	})
	return _c
}

func (_c *AgentsPublicApiV1SrvServer_SendSentinelOneData_Call) Return(_a0 *agentsPublicApiV1.SendSentinelOneDataRes, _a1 error) *AgentsPublicApiV1SrvServer_SendSentinelOneData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentsPublicApiV1SrvServer_SendSentinelOneData_Call) RunAndReturn(run func(context.Context, *agentsPublicApiV1.SendSentinelOneDataReq) (*agentsPublicApiV1.SendSentinelOneDataRes, error)) *AgentsPublicApiV1SrvServer_SendSentinelOneData_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAgentsPublicApiV1SrvServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewAgentsPublicApiV1SrvServer creates a new instance of AgentsPublicApiV1SrvServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAgentsPublicApiV1SrvServer(t mockConstructorTestingTNewAgentsPublicApiV1SrvServer) *AgentsPublicApiV1SrvServer {
	mock := &AgentsPublicApiV1SrvServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
